name: Run CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      stage:
        description: Stage
        type: choice
        required: true
        options:
          - beta
          - prod
      hexdoc-release:
        description: Force a web book release
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: object-object/hexbug

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      stage: ${{ steps.get-stage.outputs.stage }}
      hexdoc-release: ${{ steps.get-stage.outputs.stage == 'prod' || inputs.hexdoc-release }}
    steps:
      - name: Get deployment stage
        id: get-stage
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            STAGE="${{ inputs.stage }}"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+(\.[0-9]+)+$ ]]; then
            STAGE="prod"
          else
            STAGE="beta"
          fi
          echo "Deployment stage: \`$STAGE\`" | tee >> $GITHUB_STEP_SUMMARY
          echo "stage=$STAGE" >> "$GITHUB_OUTPUT"

  build:
    needs:
      - setup
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      hexdoc-release: ${{ needs.setup.outputs.hexdoc-release == 'true' }}

  push-image:
    needs:
      - setup
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment:
      name: docker
      url: https://${{ needs.build.outputs.image-tag }}
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ${{ runner.temp }}

      - name: Load image
        run: docker load --input ${{ runner.temp }}/image.tar

      - name: Push image
        run: docker image push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Get image digest
        id: digest
        run: echo "value=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ needs.build.outputs.image-tag }})" >> "$GITHUB_OUTPUT"

  deploy-beta:
    needs:
      - setup
      - build
      - push-image
    uses: ./.github/workflows/deploy-bot.yml
    permissions:
      contents: read
      id-token: write
    secrets: inherit
    with:
      stage: beta
      image-digest: ${{ needs.push-image.outputs.digest }}

  deploy-prod:
    needs:
      - setup
      - build
      - push-image
      - deploy-beta
    if: needs.setup.outputs.stage == 'prod'
    uses: ./.github/workflows/deploy-bot.yml
    permissions:
      contents: read
      id-token: write
    secrets: inherit
    with:
      stage: prod
      image-digest: ${{ needs.push-image.outputs.digest }}

  deploy-pages:
    needs:
      - setup
      - build
    runs-on: ubuntu-latest
    concurrency:
      group: hexdoc-deploy-pages
      cancel-in-progress: false
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: object-Object/ci/setup@v0
        with:
          python-version-file: .python-version

      - name: Sync dependencies
        run: |
          export UV_PROJECT_ENVIRONMENT="${pythonLocation}"
          uv sync --frozen --no-dev --package HexBug-web

      - name: Download hexdoc.toml artifact
        uses: actions/download-artifact@v4
        with:
          name: hexdoc-toml

      - name: Merge and deploy to Pages
        uses: hexdoc-dev/actions/deploy-pages@v1
        with:
          release: ${{ needs.setup.outputs.hexdoc-release == 'true' }}
          site-url: ${{ needs.build.outputs.pages-url }}

  publish-pypi:
    needs:
      - setup
      - build
      - deploy-pages
    if: needs.setup.outputs.stage == 'prod'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/HexBug-data
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: hexdoc-build
          path: dist

      - name: Remove extraneous files
        run: rm dist/*.txt dist/*.toml

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
